(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[34],{MZF8:function(e,n,t){"use strict";var r=t("ogwx");t.d(n,"a",(function(){return r["b"]}));t("VCU9")},OYlG:function(e,n,t){"use strict";t.r(n);var r=t("mn0l"),s=t("uLvW"),o=t.n(s),a=t("RGYn"),i=t("DBVu"),u=t("GAyR"),c=t("2KoA"),l="import React from 'react';\nimport { useBoolean } from 'frogHooks';\n\nexport default () => {\n  const [state, { toggle, setTrue, setFalse }] = useBoolean(true);\n\n  return (\n    <div>\n      <p>Effects\uff1a{JSON.stringify(state)}</p>\n      <p>\n        <button type=\"button\" onClick={toggle}>\n          Toggle\n        </button>\n        <button type=\"button\" onClick={setFalse} style={{ margin: '0 16px' }}>\n          Set false\n        </button>\n        <button type=\"button\" onClick={setTrue}>\n          Set true\n        </button>\n      </p>\n    </div>\n  );\n};",d="import React, { useState } from 'react';\nimport { useDebounce } from 'frogHooks';\n\nexport default () => {\n  const [value, setValue] = useState<string>();\n  const debouncedValue = useDebounce(value, { wait: 500 });\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        placeholder=\"Typed value\"\n        style={{ width: 200 }}\n      />\n      <p style={{ marginTop: 16 }}>DebouncedValue: {debouncedValue}</p>\n    </>\n  );\n};",m="import { useDebounceFn } from 'frogHooks';\nimport React, { useState } from 'react';\n\nexport default () => {\n  const [value, setValue] = useState(0);\n  const { run, cancel, flush } = useDebounceFn(\n    () => {\n      setValue(value + 1);\n    },\n    {\n      wait: 500,\n    },\n  );\n\n  return (\n    <div>\n      <p style={{ marginTop: 16 }}> Clicked count: {value} </p>\n      <button type=\"button\" onClick={run}>\n        Click fast!\n      </button>\n    </div>\n  );\n};",p="import React, { useState, useEffect } from 'react';\nimport { useLatest } from 'frogHooks';\n\nexport default () => {\n  const [count, setCount] = useState(0);\n\n  const latestCountRef = useLatest(count);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCount(latestCountRef.current + 1);\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <>\n      <p>count: {count}</p>\n    </>\n  );\n};",f="import React, { useState, useCallback } from 'react';\nimport { message } from 'antd';\nimport { useMemoizedFn } from 'frogHooks';\n\nexport default () => {\n  const [count, setCount] = useState(0);\n\n  const callbackFn = useCallback(() => {\n    message.info(`Current count is ${count}`);\n  }, [count]);\n\n  const memoizedFn = useMemoizedFn(() => {\n    message.info(`Current count is ${count}`);\n  });\n\n  return (\n    <>\n      <p>count: {count}</p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setCount((c) => c + 1);\n        }}\n      >\n        Add Count\n      </button>\n      <div style={{ marginTop: 16 }}>\n        <button type=\"button\" onClick={callbackFn}>\n          call callbackFn\n        </button>\n        <button type=\"button\" onClick={memoizedFn} style={{ marginLeft: 8 }}>\n          call memoizedFn\n        </button>\n      </div>\n    </>\n  );\n};",g="import React, { useState, useCallback, useRef } from 'react';\nimport { message } from 'antd';\nimport { useMemoizedFn } from 'frogHooks';\n\nexport default () => {\n  const [count, setCount] = useState(0);\n\n  const callbackFn = useCallback(() => {\n    message.info(`Current count is ${count}`);\n  }, [count]);\n\n  const memoizedFn = useMemoizedFn(() => {\n    message.info(`Current count is ${count}`);\n  });\n\n  return (\n    <>\n      <p>count: {count}</p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setCount((c) => c + 1);\n        }}\n      >\n        Add Count\n      </button>\n\n      <p>\n        You can click the button to see the number of sub-component renderings\n      </p>\n\n      <div style={{ marginTop: 32 }}>\n        <h3>Component with useCallback function:</h3>\n        {/* use callback function, ExpensiveTree component will re-render on state change */}\n        <ExpensiveTree showCount={callbackFn} />\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <h3>Component with useMemoizedFn function:</h3>\n        {/* use memoized function, ExpensiveTree component will only render once */}\n        <ExpensiveTree showCount={memoizedFn} />\n      </div>\n    </>\n  );\n};\n\n// some expensive component with React.memo\n// memo \u5141\u8bb8\u4f60\u7684\u7ec4\u4ef6\u5728 props \u6ca1\u6709\u6539\u53d8\u7684\u60c5\u51b5\u4e0b\u8df3\u8fc7\u91cd\u65b0\u6e32\u67d3\u3002\nconst ExpensiveTree = React.memo<{ [key: string]: any }>(({ showCount }) => {\n  const renderCountRef = useRef(0);\n  renderCountRef.current += 1;\n\n  return (\n    <div>\n      <p>Render Count: {renderCountRef.current}</p>\n      <button type=\"button\" onClick={showCount}>\n        showParentCount\n      </button>\n    </div>\n  );\n});",h="import React from 'react';\nimport { useMount, useBoolean } from 'frogHooks';\nimport { message } from 'antd';\n\nconst MyComponent = () => {\n  useMount(() => {\n    message.info('mount');\n  });\n\n  return <div>Hello World</div>;\n};\n\nexport default () => {\n  const [state, { toggle }] = useBoolean(false);\n\n  return (\n    <>\n      <button type=\"button\" onClick={toggle}>\n        {state ? 'unmount' : 'mount'}\n      </button>\n      {state && <MyComponent />}\n    </>\n  );\n};",b="import React from 'react';\nimport { useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\n\nfunction getUsername(): Promise<string> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.5) {\n        resolve(Mock.mock('@name'));\n      } else {\n        reject(new Error('Failed to get username'));\n      }\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const { data, error, loading } = useRequest(getUsername);\n\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n\n  if (loading) {\n    return <p>loading...</p>;\n  }\n\n  return <p>Username: {data}</p>;\n};",v="import { message } from 'antd';\nimport React, { useState } from 'react';\nimport { useRequest } from 'frogHooks';\n\nfunction editUsername(username: string): Promise<{ username: string }> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.5) {\n        resolve({ username });\n      } else {\n        reject(new Error('Failed to modify username'));\n      }\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const [state, setState] = useState('');\n\n  const { data, error, loading, run } = useRequest(editUsername, {\n    manual: true,\n    onSuccess: (result, params) => {\n      setState('');\n      message.success(`The username was changed to \"${params[0]}\" !`);\n    },\n    onError: (error) => {\n      message.error(error.message);\n    },\n  });\n\n  return (\n    <div>\n      <input\n        onChange={(e) => setState(e.target.value)}\n        value={state}\n        placeholder=\"Please enter username\"\n        style={{ width: 240, marginRight: 16 }}\n      />\n      <button disabled={loading} type=\"button\" onClick={() => run(state)}>\n        {loading ? 'Loading' : 'Edit'}\n      </button>\n      <p>Username: {data?.username}</p>\n    </div>\n  );\n};",y="import { message } from 'antd';\nimport React, { useState } from 'react';\nimport { useRequest } from 'frogHooks';\n\nfunction editUsername(username: string): Promise<{ username: string }> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.5) {\n        resolve({ username });\n      } else {\n        reject(new Error('Failed to modify username'));\n      }\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const [state, setState] = useState('');\n\n  const { data, error, loading, runAsync } = useRequest(editUsername, {\n    manual: true,\n  });\n\n  const onClick = async () => {\n    await runAsync(state)\n      .then(() => {\n        setState('');\n        message.success(`The username was changed to \"${state}\" !`);\n      })\n      .catch((error) => {\n        message.error(error.message);\n      });\n    // try {\n    //   await runAsync(state);\n    //   setState('');\n    //   message.success(`The username was changed to \"${state}\" !`);\n    // } catch (error) {\n    //   message.error(error.message);\n    // }\n  };\n\n  return (\n    <div>\n      <input\n        onChange={(e) => setState(e.target.value)}\n        value={state}\n        placeholder=\"Please enter username\"\n        style={{ width: 240, marginRight: 16 }}\n      />\n      <button disabled={loading} type=\"button\" onClick={onClick}>\n        {loading ? 'Loading' : 'Edit'}\n      </button>\n      <p>Username: {data?.username}</p>\n    </div>\n  );\n};",w="import { message } from 'antd';\nimport React, { useState } from 'react';\nimport { useRequest } from 'frogHooks';\n\nfunction editUsername(username: string): Promise<{ username: string }> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.5) {\n        resolve({ username });\n      } else {\n        reject(new Error('Failed to modify username'));\n      }\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const [state, setState] = useState('');\n\n  const { data, error, loading, run } = useRequest(editUsername, {\n    manual: true,\n    onBefore: (params) => {\n      message.info(`Start Request: ${params[0]}`);\n    },\n    onSuccess: (result, params) => {\n      setState('');\n      message.success(`The username was changed to \"${params[0]}\" !`);\n    },\n    onError: (error) => {\n      message.error(error.message);\n    },\n    onFinally: (params, result, error) => {\n      message.info(`Request finish`);\n    },\n  });\n\n  return (\n    <div>\n      <input\n        onChange={(e) => setState(e.target.value)}\n        value={state}\n        placeholder=\"Please enter username\"\n        style={{ width: 240, marginRight: 16 }}\n      />\n      <button disabled={loading} type=\"button\" onClick={() => run(state)}>\n        {loading ? 'Loading' : 'Edit'}\n      </button>\n      <p>Username: {data?.username}</p>\n    </div>\n  );\n};",k="import { useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\nimport React, { useEffect } from 'react';\n\nfunction getUsername(id: number): Promise<string> {\n  console.log('use-request-refresh-id', id);\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock('@name'));\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const { data, loading, run, refresh } = useRequest(\n    (id: number) => getUsername(id),\n    {\n      manual: true,\n    },\n  );\n\n  useEffect(() => {\n    run(1);\n  }, []);\n\n  if (loading) {\n    return <div>loading...</div>;\n  }\n  return (\n    <div>\n      <p>Username: {data}</p>\n      <button onClick={refresh} type=\"button\">\n        Refresh\n      </button>\n    </div>\n  );\n};",P="import { message } from 'antd';\nimport React, { useState, useRef } from 'react';\nimport { useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\n\nfunction getUsername(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock('@name'));\n    }, 1000);\n  });\n}\n\nfunction editUsername(username: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.5) {\n        resolve();\n      } else {\n        reject(new Error('Failed to modify username'));\n      }\n    }, 1000);\n  });\n}\n\nexport default () => {\n  // store last username\n  const lastRef = useRef<string>();\n\n  const [state, setState] = useState('');\n\n  // get username\n  const { data: username, mutate } = useRequest(getUsername);\n\n  // edit username\n  const { run: edit } = useRequest(editUsername, {\n    manual: true,\n    onSuccess: (result, params) => {\n      setState('');\n      message.success(`The username was changed to \"${params[0]}\" !`);\n    },\n    onError: (error) => {\n      message.error(error.message);\n      mutate(lastRef.current);\n    },\n  });\n\n  const onChange = () => {\n    lastRef.current = username;\n    mutate(state);\n    edit(state);\n  };\n\n  return (\n    <div>\n      <p>Username: {username}</p>\n      <input\n        onChange={(e) => setState(e.target.value)}\n        value={state}\n        placeholder=\"Please enter username\"\n        style={{ width: 240, marginRight: 16 }}\n      />\n      <button type=\"button\" onClick={onChange}>\n        Edit\n      </button>\n    </div>\n  );\n};",R="import { message } from 'antd';\nimport React, { useState } from 'react';\nimport { useRequest } from 'frogHooks';\n\nfunction editUsername(username: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (Math.random() > 0.5) {\n        resolve();\n      } else {\n        reject(new Error('Failed to modify username'));\n      }\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const [state, setState] = useState('');\n\n  const { loading, run, cancel } = useRequest(editUsername, {\n    manual: true,\n    onSuccess: (result, params) => {\n      setState('');\n      message.success(`The username was changed to \"${params[0]}\" !`);\n    },\n    onError: (error) => {\n      message.error(error.message);\n    },\n  });\n\n  return (\n    <div>\n      <input\n        onChange={(e) => setState(e.target.value)}\n        value={state}\n        placeholder=\"Please enter username\"\n        style={{ width: 240, marginRight: 16 }}\n      />\n      <button disabled={loading} type=\"button\" onClick={() => run(state)}>\n        {loading ? 'Loading' : 'Edit'}\n      </button>\n      <button type=\"button\" onClick={cancel} style={{ marginLeft: 16 }}>\n        Cancel\n      </button>\n    </div>\n  );\n};",x="import { useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\nimport React, { useState } from 'react';\n\nfunction getUsername(id: string): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock('@name'));\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const [state, setState] = useState('');\n\n  // get username\n  const {\n    data: username,\n    run,\n    params,\n  } = useRequest(getUsername, {\n    defaultParams: ['1'],\n  });\n\n  const onChange = () => {\n    run(state);\n  };\n\n  return (\n    <div>\n      <input\n        onChange={(e) => setState(e.target.value)}\n        value={state}\n        placeholder=\"Please enter userId\"\n        style={{ width: 240, marginRight: 16 }}\n      />\n      <button type=\"button\" onClick={onChange}>\n        GetUserName\n      </button>\n      <p style={{ marginTop: 8 }}>UserId: {params[0]}</p>\n      <p>Username: {username}</p>\n    </div>\n  );\n};",j="import { useBoolean, useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\nimport React from 'react';\n\nasync function getArticle(): Promise<{ data: string; time: number }> {\n  console.log('cacheKey');\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        data: Mock.mock('@paragraph'),\n        time: new Date().getTime(),\n      });\n    }, 1000);\n  });\n}\n\nconst Article = () => {\n  const { data, loading } = useRequest(getArticle, {\n    cacheKey: 'cacheKey-demo',\n  });\n  if (!data && loading) {\n    return <p>Loading</p>;\n  }\n  return (\n    <>\n      <p>Background loading: {loading ? 'true' : 'false'}</p>\n      <p>Latest request time: {data?.time}</p>\n      <p>{data?.data}</p>\n    </>\n  );\n};\n\nexport default () => {\n  const [state, { toggle }] = useBoolean();\n  return (\n    <div>\n      <button type=\"button\" onClick={() => toggle()}>\n        show/hidden\n      </button>\n      {state && <Article />}\n    </div>\n  );\n};",C="import { useBoolean, useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\nimport React from 'react';\n\nasync function getArticle(): Promise<{ data: string; time: number }> {\n  console.log('cacheKey-staleTime');\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        data: Mock.mock('@paragraph'),\n        time: new Date().getTime(),\n      });\n    }, 1000);\n  });\n}\n\nconst Article = () => {\n  const { data, loading } = useRequest(getArticle, {\n    cacheKey: 'staleTime-demo',\n    staleTime: 5000,\n  });\n  if (!data && loading) {\n    return <p>Loading</p>;\n  }\n  return (\n    <>\n      <p>Background loading: {loading ? 'true' : 'false'}</p>\n      <p>Latest request time: {data?.time}</p>\n      <p>{data?.data}</p>\n    </>\n  );\n};\n\nexport default () => {\n  const [state, { toggle }] = useBoolean();\n  return (\n    <div>\n      <button type=\"button\" onClick={() => toggle()}>\n        show/hidden\n      </button>\n      {state && <Article />}\n    </div>\n  );\n};",O="import Mock from 'mockjs';\nimport React from 'react';\nimport { useRequest } from 'frogHooks';\n\nasync function getArticle(): Promise<{ data: string; time: number }> {\n  console.log('cacheKey-share');\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        data: Mock.mock('@paragraph'),\n        time: new Date().getTime(),\n      });\n    }, 3000);\n  });\n}\n\nconst Article = () => {\n  const { data, loading, refresh } = useRequest(getArticle, {\n    cacheKey: 'cacheKey-share',\n  });\n  if (!data && loading) {\n    return <p>Loading</p>;\n  }\n  return (\n    <>\n      <p>Background loading: {loading ? 'true' : 'false'}</p>\n      <p>\n        <button onClick={refresh} type=\"button\">\n          \u66f4\u65b0\n        </button>\n      </p>\n      <p>Latest request time: {data?.time}</p>\n      <p>{data?.data}</p>\n    </>\n  );\n};\n\nexport default () => {\n  return (\n    <div>\n      <h2>Article 1</h2>\n      <Article />\n      <h2>Article 2</h2>\n      <Article />\n    </div>\n  );\n};",T="import { useBoolean } from 'frogHooks';\nimport useRequest from '../../../';\nimport Mock from 'mockjs';\nimport React, { useState } from 'react';\n\nasync function getArticle(\n  keyword: string,\n): Promise<{ data: string; time: number }> {\n  console.log('cacheKey', keyword);\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        data: Mock.mock('@paragraph'),\n        time: new Date().getTime(),\n      });\n    }, 1000);\n  });\n}\n\nconst Article = () => {\n  const { data, params, loading, run } = useRequest(getArticle, {\n    cacheKey: 'cacheKey-demo',\n  });\n\n  const [keyword, setKeyword] = useState(params[0] || '');\n\n  if (!data && loading) {\n    return <p>Loading</p>;\n  }\n  return (\n    <>\n      <div>\n        <input\n          style={{ width: 300 }}\n          value={keyword}\n          onChange={(e) => setKeyword(e.target.value)}\n        />\n        <button\n          style={{ marginLeft: 8 }}\n          onClick={() => {\n            run(keyword);\n          }}\n        >\n          Get\n        </button>\n      </div>\n      <p>Background loading: {loading ? 'true' : 'false'}</p>\n      <p>Latest request time: {data?.time}</p>\n      <p>Keyword: {keyword}</p>\n      <p>{data?.data}</p>\n    </>\n  );\n};\n\nexport default () => {\n  const [state, { toggle }] = useBoolean();\n  return (\n    <div>\n      <button\n        type=\"button\"\n        onClick={() => toggle()}\n        style={{ marginBottom: 16 }}\n      >\n        show/hidden\n      </button>\n      {state && <Article />}\n    </div>\n  );\n};",S="import useRequest from './src/useRequest';\nimport { clearCache } from './src/utils/cache';\n\nexport { clearCache };\n\nexport default useRequest;",D="import type { Options, Plugin, Service } from './types';\nimport useRequestImplement from './useRequestImplement';\nimport useLoadingDelayPlugin from './plugins/useLoadingDelayPlugin';\nimport usePollingPlugin from './plugins/usePollingPlugin';\nimport useAutoRunPlugin from './plugins/useAutoRunPlugin';\nimport useRefreshOnWindowFocusPlugin from './plugins/useRefreshOnWindowFocusPlugin';\nimport useCachePlugin from './plugins/useCachePlugin';\nimport useDebouncePlugin from './plugins/useDebouncePlugin';\nimport useThrottlePlugin from './plugins/useThrottlePlugin';\n\nfunction useRequest<TData, TParams extends any[]>(\n  service: Service<TData, TParams>,\n  options?: Options<TData, TParams>,\n  plugins?: Plugin<TData, TParams>[],\n) {\n  return useRequestImplement<TData, TParams>(service, options, [\n    ...(plugins || []),\n    useLoadingDelayPlugin,\n    usePollingPlugin,\n    useAutoRunPlugin,\n    useRefreshOnWindowFocusPlugin,\n    useCachePlugin,\n    useDebouncePlugin,\n    useThrottlePlugin,\n  ] as Plugin<TData, TParams>[]);\n}\n\nexport default useRequest;",U="import useLatest from '../../useLatest';\nimport useMemoizedFn from '../../useMemoizedFn';\nimport useMount from '../../useMount';\nimport useUnmount from '../../useUnmount';\nimport useUpdate from '../../useUpdate';\nimport isDev from '../../utils/isDev';\nimport Fetch from './Fetch';\nimport type { Options, Plugin, Result, Service } from './types';\nimport { useMemo } from 'react';\n\nfunction useRequestImplement<TData, TParams extends any[]>(\n  service: Service<TData, TParams>,\n  options: Options<TData, TParams> = {},\n  plugins: Plugin<TData, TParams>[] = [],\n) {\n  const { manual = false, ...rest } = options;\n\n  if (isDev) {\n    if (options.defaultParams && !Array.isArray(options.defaultParams)) {\n      console.warn(\n        `expected defaultParams is array, got ${typeof options.defaultParams}`,\n      );\n    }\n  }\n\n  const fetchOptions = {\n    manual,\n    ...rest,\n  };\n\n  const serviceRef = useLatest(service);\n\n  const update = useUpdate();\n\n  const fetchInstance = useMemo(() => {\n    const initState = plugins\n      .map((p) => {\n        return p?.onInit?.(fetchOptions);\n      })\n      .filter(Boolean);\n\n    return new Fetch<TData, TParams>(\n      serviceRef,\n      fetchOptions,\n      update,\n      Object.assign({}, ...initState),\n    );\n  }, []);\n\n  fetchInstance.options = fetchOptions;\n\n  fetchInstance.pluginImpls = plugins.map((p) => {\n    return p(fetchInstance, fetchOptions);\n  });\n\n  useMount(() => {\n    if (!manual) {\n      // useCachePlugin can set fetchInstance.state.params from cache when init\n      const params = fetchInstance.state.params || options.defaultParams || [];\n      fetchInstance.run(...params);\n    }\n  });\n\n  useUnmount(() => {\n    fetchInstance.cancel();\n  });\n\n  return {\n    loading: fetchInstance.state.loading,\n    data: fetchInstance.state.data,\n    error: fetchInstance.state.error,\n    params: fetchInstance.state.params || [],\n    cancel: useMemoizedFn(fetchInstance.cancel.bind(fetchInstance)),\n    refresh: useMemoizedFn(fetchInstance.refresh.bind(fetchInstance)),\n    refreshAsync: useMemoizedFn(fetchInstance.refreshAsync.bind(fetchInstance)),\n    run: useMemoizedFn(fetchInstance.run.bind(fetchInstance)),\n    runAsync: useMemoizedFn(fetchInstance.runAsync.bind(fetchInstance)),\n    mutate: useMemoizedFn(fetchInstance.mutate.bind(fetchInstance)),\n  } as Result<TData, TParams>;\n}\n\nexport default useRequestImplement;",E="import { useRef } from 'react';\n\nfunction useLatest<T>(value: T) {\n  const ref = useRef(value);\n  ref.current = value;\n\n  return ref;\n}\n\nexport default useLatest;",M="import React, { useRef, useMemo } from 'react';\nimport { isFunction } from '../utils';\nimport isDev from '../utils/isDev';\n\ntype noop = (this: any, ...args: any[]) => any;\n\ntype PickFunction<T extends noop> = (\n  this: ThisParameterType<T>,\n  ...args: Parameters<T>\n) => ReturnType<T>;\n\nfunction useMemoizedFn<T extends noop>(fn: T) {\n  if (isDev) {\n    if (!isFunction(fn)) {\n      console.error(\n        `useMemoizedFn expected parameter is a function, got ${typeof fn}`,\n      );\n    }\n  }\n\n  const fnRef = useRef<T>(fn);\n  fnRef.current = useMemo(() => fn, [fn]);\n\n  const memoizedFn = useRef<PickFunction<T>>();\n  if (!memoizedFn.current) {\n    memoizedFn.current = function (this, ...args) {\n      return fnRef.current.apply(this, args);\n    };\n  }\n\n  return memoizedFn.current as T;\n}\n\nexport default useMemoizedFn;",F="export const isObject = (value: unknown): value is Record<any, any> =>\n  value !== null && typeof value === 'object';\nexport const isFunction = (value: unknown): value is (...args: any) => any =>\n  typeof value === 'function';\n\nexport const isString = (value: unknown): value is string =>\n  typeof value === 'string';\nexport const isBoolean = (value: unknown): value is boolean =>\n  typeof value === 'boolean';\nexport const isNumber = (value: unknown): value is number =>\n  typeof value === 'number';\nexport const isUndef = (value: unknown): value is undefined =>\n  typeof value === 'undefined';",A="const isDev =\n  process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test';\n\nexport default isDev;",q="import { useEffect } from 'react';\nimport { isFunction } from '../utils';\nimport isDev from '../utils/isDev';\n\nconst useMount = (fn: () => void) => {\n  if (isDev) {\n    if (!isFunction(fn)) {\n      console.error(\n        `useMount: parameter \\`fn\\` expected to be a function, but got \"${typeof fn}\".`,\n      );\n    }\n  }\n\n  useEffect(() => {\n    fn?.();\n  }, []);\n};\n\nexport default useMount;",L="import { useEffect } from 'react';\nimport useLatest from '../useLatest';\nimport { isFunction } from '../utils';\nimport isDev from '../utils/isDev';\n\nfunction useUnmount(fn: () => void) {\n  if (isDev) {\n    if (!isFunction(fn)) {\n      console.error(\n        `useUnmount expected parameter is a function, got ${typeof fn}`,\n      );\n    }\n  }\n\n  const fnRef = useLatest(fn);\n\n  useEffect(() => {\n    return () => {\n      fnRef.current();\n    };\n  }, []);\n}\n\nexport default useUnmount;",I="import { useCallback, useState } from 'react';\n\nconst useUpdate = () => {\n  const [, setState] = useState({});\n\n  return useCallback(() => setState({}), []);\n};\n\nexport default useUpdate;",H="import { isFunction } from '../../utils';\nimport type { MutableRefObject } from 'react';\nimport type {\n  FetchState,\n  Options,\n  PluginReturn,\n  Service,\n  Subscribe,\n} from './types';\n\nexport default class Fetch<TData, TParams extends any[]> {\n  pluginImpls: PluginReturn<TData, TParams>[];\n\n  count: number = 0;\n\n  state: FetchState<TData, TParams> = {\n    loading: false,\n    params: undefined,\n    data: undefined,\n    error: undefined,\n  };\n\n  constructor(\n    public serviceRef: MutableRefObject<Service<TData, TParams>>,\n    public options: Options<TData, TParams>,\n    public subscribe: Subscribe,\n    public initState: Partial<FetchState<TData, TParams>> = {},\n  ) {\n    this.state = {\n      ...this.state,\n      loading: !options.manual,\n      ...initState,\n    };\n  }\n\n  setState(s: Partial<FetchState<TData, TParams>> = {}) {\n    this.state = {\n      ...this.state,\n      ...s,\n    };\n    this.subscribe();\n  }\n\n  runPluginHandler(event: keyof PluginReturn<TData, TParams>, ...rest: any[]) {\n    // @ts-ignore\n    const r = this.pluginImpls.map((i) => i[event]?.(...rest)).filter(Boolean);\n    return Object.assign({}, ...r);\n  }\n\n  async runAsync(...params: TParams): Promise<TData> {\n    // 1.\u8bf7\u6c42\u524d\n    // 2.\u8bf7\u6c42\u4e2d\n    // 3.\u8bf7\u6c42\u540e\n    this.count += 1;\n    const currentCount = this.count;\n\n    const {\n      stopNow = false,\n      returnNow = false,\n      ...state\n    } = this.runPluginHandler('onBefore', params);\n\n    if (stopNow) {\n      return new Promise(() => {});\n    }\n\n    this.setState({\n      loading: true,\n      params,\n      ...state,\n    });\n\n    if (returnNow) {\n      return Promise.resolve(state.data);\n    }\n\n    this.options.onBefore?.(params);\n\n    try {\n      let { servicePromise } = this.runPluginHandler(\n        'onRequest',\n        this.serviceRef.current,\n        params,\n      );\n\n      if (!servicePromise) {\n        servicePromise = this.serviceRef.current(...params);\n      }\n\n      const res = await servicePromise;\n\n      if (currentCount !== this.count) {\n        return new Promise(() => {});\n      }\n\n      this.setState({\n        loading: false,\n        data: res,\n        error: undefined,\n      });\n\n      this.options.onSuccess?.(res, params);\n      this.runPluginHandler('onSuccess', res, params);\n\n      this.options.onFinally?.(params, res, undefined);\n      if (currentCount === this.count) {\n        this.runPluginHandler('onFinally', params, res, undefined);\n      }\n\n      return res;\n    } catch (err) {\n      if (currentCount !== this.count) {\n        return new Promise(() => {});\n      }\n\n      this.setState({\n        loading: false,\n        data: undefined,\n        error: err,\n      });\n\n      this.options.onError?.(err, params);\n      this.runPluginHandler('onError', err, params);\n\n      this.options.onFinally?.(params, undefined, err);\n      if (currentCount === this.count) {\n        this.runPluginHandler('onFinally', params, undefined, err);\n      }\n\n      throw err;\n    }\n  }\n\n  run(...params: TParams) {\n    this.runAsync(...params).catch((error) => {\n      if (!this.options.onError) {\n        console.log(error);\n      }\n    });\n  }\n\n  cancel() {\n    this.count += 1;\n    this.setState({\n      loading: false,\n    });\n\n    this.runPluginHandler('onCancel');\n  }\n\n  refresh() {\n    // @ts-ignore\n    this.run(...(this.state.params || []));\n  }\n\n  refreshAsync() {\n    // @ts-ignore\n    return this.runAsync(...(this.state.params || []));\n  }\n\n  mutate(data?: TData | ((oldData?: TData) => TData | undefined)) {\n    const targetData = isFunction(data) ? data(this.state.data) : data;\n    this.runPluginHandler('onMutate', targetData);\n    this.setState({\n      data: targetData,\n    });\n  }\n}",K="import { useRef } from 'react';\nimport type { Plugin, Timeout } from '../types';\n\nconst useLoadingDelayPlugin: Plugin<any, any[]> = (\n  fetchInstance,\n  { loadingDelay, ready },\n) => {\n  const timerRef = useRef<Timeout>();\n\n  if (!loadingDelay) {\n    return {};\n  }\n\n  const cancelTimeout = () => {\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n  };\n\n  return {\n    onBefore: () => {\n      cancelTimeout();\n\n      if (ready !== false) {\n        timerRef.current = setTimeout(() => {\n          fetchInstance.setState({\n            loading: true,\n          });\n        }, loadingDelay);\n      }\n\n      return {\n        loading: false,\n      };\n    },\n    onFinally: () => {\n      cancelTimeout();\n    },\n    onCancel: () => {\n      cancelTimeout();\n    },\n  };\n};\n\nexport default useLoadingDelayPlugin;",B="import { useRef } from 'react';\nimport useUpdateEffect from '../../../useUpdateEffect';\nimport isDocumentVisible from '../utils/isDocumentVisible';\nimport subscribeReVisible from '../utils/subscribeReVisible';\nimport type { Plugin, PluginReturn, Timeout } from '../types';\n\nconst usePollingPlugin: Plugin<any, any[]> = (\n  fetchInstance,\n  { pollingInterval, pollingWhenHidden = true, pollingErrorRetryCount = -1 },\n) => {\n  const timerRef = useRef<Timeout>();\n  const unsubscribeRef = useRef<() => void>();\n  const countRef = useRef<number>(0);\n\n  const stopPolling = () => {\n    if (timerRef.current) {\n      clearTimeout(timerRef.current);\n    }\n    // \u53d6\u6d88\u8ba2\u9605\n    unsubscribeRef.current?.();\n  };\n\n  useUpdateEffect(() => {\n    if (!pollingInterval) {\n      stopPolling();\n    }\n  }, [pollingInterval]);\n\n  if (!pollingInterval) {\n    return {};\n  }\n\n  return {\n    onBefore: () => {\n      stopPolling();\n    },\n    onSuccess: () => {\n      countRef.current = 0;\n    },\n    onError: () => {\n      countRef.current += 1;\n    },\n    onFinally: () => {\n      if (\n        pollingErrorRetryCount === -1 ||\n        (pollingErrorRetryCount !== -1 &&\n          countRef.current <= pollingErrorRetryCount)\n      ) {\n        timerRef.countRef = setTimeout(() => {\n          // if pollingWhenHidden = false && document is hidden, then stop polling and subscribe revisible\n          if (!pollingWhenHidden && !isDocumentVisible()) {\n            unsubscribeRef.current = subscribeReVisible(() => {\n              fetchInstance.refresh();\n            });\n          } else {\n            fetchInstance.refresh();\n          }\n        }, pollingInterval);\n      } else {\n        countRef.current = 0;\n      }\n    },\n    onCancel: () => {\n      stopPolling();\n    },\n  };\n};\n\nexport default usePollingPlugin;",_="import { createUpdateEffect } from '../createUpdateEffect';\nimport { useEffect } from 'react';\n\nexport default createUpdateEffect(useEffect);",W="import { useRef } from 'react';\nimport type { useEffect, useLayoutEffect } from 'react';\n\ntype EffectHookType = typeof useEffect | typeof useLayoutEffect;\n\nexport const createUpdateEffect: (hook: EffectHookType) => EffectHookType =\n  (hook) => (effect, deps) => {\n    const isMounted = useRef(false);\n\n    // for react-refresh\n    hook(() => {\n      return () => {\n        isMounted.current = false;\n      };\n    }, []);\n\n    hook(() => {\n      if (!isMounted.current) {\n        isMounted.current = true;\n      } else {\n        return effect();\n      }\n    }, deps);\n  };\n\n// function createUpdateEffect(hook: EffectHookType): EffectHookType {\n//   return function (effect, deps) {\n//     // \u5177\u4f53\u903b\u8f91\n//   };\n// }\n\nexport default createUpdateEffect;",z="import isBrowser from '../../../utils/isBrowser';\n\nexport default function isDocumentVisible(): boolean {\n  if (isBrowser) {\n    return document.visibilityState !== 'hidden';\n  }\n  return true;\n}",V="const isBrowser = !!(\n  typeof window !== 'undefined' &&\n  window.document &&\n  window.document.createElement\n);\n\nexport default isBrowser;",N="import isBrowser from '../../../utils/isBrowser';\nimport isDocumentVisible from './isDocumentVisible';\n\ntype Listener = () => void;\n\nconst listeners: Listener[] = [];\n\nfunction subscribe(listener: Listener) {\n  listeners.push(listener);\n  return function unsubscribe() {\n    const index = listeners.indexOf(listener);\n    listeners.splice(index, 1);\n  };\n}\n\nif (isBrowser) {\n  const revalidate = () => {\n    if (!isDocumentVisible()) return;\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener();\n    }\n  };\n\n  window.addEventListener('visibilitychange', revalidate, false);\n}\n\nexport default subscribe;",$="import { useRef } from 'react';\nimport useUpdateEffect from '../../../useUpdateEffect';\nimport type { Plugin } from '../types';\n\n// support refreshDeps & ready\nconst useAutoRunPlugin: Plugin<any, any[]> = (\n  fetchInstance,\n  {\n    manual,\n    ready = true,\n    defaultParams = [],\n    refreshDeps = [],\n    refreshDepsAction,\n  },\n) => {\n  const hasAutoRunRef = useRef(false);\n  hasAutoRunRef.current = false;\n\n  useUpdateEffect(() => {\n    if (!manual && ready) {\n      hasAutoRunRef.current = true;\n      fetchInstance.run(...defaultParams);\n    }\n  }, [ready]);\n\n  useUpdateEffect(() => {\n    if (hasAutoRunRef.current) {\n      return;\n    }\n    if (!manual) {\n      hasAutoRunRef.current = true;\n      if (refreshDepsAction) {\n        refreshDepsAction();\n      } else {\n        fetchInstance.refresh();\n      }\n    }\n  }, [...refreshDeps]);\n\n  return {\n    onBefore: () => {\n      if (!ready) {\n        return {\n          stopNow: true,\n        };\n      }\n    },\n  };\n};\n\nuseAutoRunPlugin.onInit = ({ manual, ready = true }) => {\n  return {\n    loading: !manual && ready,\n  };\n};\n\nexport default useAutoRunPlugin;",G="import { useEffect, useRef } from 'react';\nimport useUnmount from '../../../useUnmount';\nimport type { Plugin } from '../types';\nimport limit from '../utils/limit';\nimport subscribeFocus from '../utils/subscribeFocus';\n\nconst useRefreshOnWindowFocusPlugin: Plugin<any, any[]> = (\n  fetchInstance,\n  { refreshOnWindowFocus, focusTimespan = 5000 },\n) => {\n  const unsubscribeRef = useRef<() => void>();\n\n  const stopSubscribe = () => {\n    unsubscribeRef.current?.();\n  };\n\n  useEffect(() => {\n    if (refreshOnWindowFocus) {\n      const limitRefresh = limit(\n        fetchInstance.refresh.bind(fetchInstance),\n        focusTimespan,\n      );\n      unsubscribeRef.current = subscribeFocus(() => {\n        limitRefresh();\n      });\n    }\n    return () => {\n      stopSubscribe();\n    };\n  }, [refreshOnWindowFocus, focusTimespan]);\n\n  useUnmount(() => {\n    stopSubscribe();\n  });\n\n  return {};\n};\n\nexport default useRefreshOnWindowFocusPlugin;",J="export default function limit(fn: any, timespan: number) {\n  let pending = false;\n  return (...args: any[]) => {\n    if (pending) return;\n    pending = true;\n    fn(...args);\n    setTimeout(() => {\n      pending = false;\n    }, timespan);\n  };\n}",Z="// from swr\nimport isBrowser from '../../../utils/isBrowser';\nimport isDocumentVisible from './isDocumentVisible';\nimport isOnline from './isOnline';\n\ntype Listener = () => void;\n\nconst listeners: Listener[] = [];\n\nfunction subscribe(listener: Listener) {\n  listeners.push(listener);\n  return function unsubscribe() {\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  };\n}\n\nif (isBrowser) {\n  const revalidate = () => {\n    if (!isDocumentVisible() || !isOnline()) return;\n    for (let i = 0; i < listeners.length; i++) {\n      const listener = listeners[i];\n      listener();\n    }\n  };\n  window.addEventListener('visibilitychange', revalidate, false);\n  window.addEventListener('focus', revalidate, false);\n}\n\nexport default subscribe;",Y="import isBrowser from '../../../utils/isBrowser';\n\nexport default function isOnline(): boolean {\n  if (isBrowser && typeof navigator.onLine !== 'undefined') {\n    return navigator.onLine;\n  }\n  return true;\n}",X="import { useRef, useMemo } from 'react';\nimport useUnmount from '../../../useUnmount';\nimport type { Plugin } from '../types';\nimport { setCache, getCache } from '../utils/cache';\nimport type { CachedData } from '../utils/cache';\nimport { setCachePromise, getCachePromise } from '../utils/cachePromise';\nimport { trigger, subscribe } from '../utils/cacheSubscribe';\n\nconst useCachePlugin: Plugin<any, any[]> = (\n  fetchInstance,\n  {\n    cacheKey,\n    cacheTime = 5 * 60 * 1000,\n    staleTime = 0,\n    setCache: customSetCache,\n    getCache: customGetCache,\n  },\n) => {\n  const unSubscribeRef = useRef<() => void>();\n\n  const currentPromiseRef = useRef<Promise<any>>();\n\n  const _setCache = (key: string, cachedData: CachedData) => {\n    if (customSetCache) {\n      customSetCache(cachedData);\n    } else {\n      setCache(key, cacheTime, cachedData);\n    }\n    trigger(key, cachedData.data);\n  };\n\n  const _getCache = (key: string, params: any[] = []) => {\n    if (customGetCache) {\n      customGetCache(params);\n    }\n    return getCache(key);\n  };\n\n  useMemo(() => {\n    if (!cacheKey) {\n      return;\n    }\n\n    // get data from cache when init\n    const cacheData = _getCache(cacheKey);\n    if (cacheData && Object.hasOwnProperty.call(cacheData, 'data')) {\n      fetchInstance.state.data = cacheData.data;\n      fetchInstance.state.params = cacheData.params;\n      if (\n        staleTime === -1 ||\n        new Date().getTime() - cacheData.time <= staleTime\n      ) {\n        fetchInstance.state.loading = false;\n      }\n    }\n\n    // subscribe same cachekey update, trigger update\n    unSubscribeRef.current = subscribe(cacheKey, (data) => {\n      fetchInstance.setState({ data });\n    });\n  }, []);\n\n  useUnmount(() => {\n    unSubscribeRef.current?.();\n  });\n\n  if (!cacheKey) {\n    return {};\n  }\n\n  return {\n    onBefore: (params) => {\n      const cacheData = _getCache(cacheKey, params);\n\n      if (!cacheData || !Object.hasOwnProperty.call(cacheData, 'data')) {\n        return {};\n      }\n\n      // if the data is fresh, stop request\n      if (\n        staleTime === -1 ||\n        new Date().getTime() - cacheData.time <= staleTime\n      ) {\n        return {\n          stopNow: true,\n          data: cacheData?.data,\n          error: undefined,\n          returnNow: true,\n        };\n      } else {\n        // If the data is stale, return data, and request continue\n        return {\n          data: cacheData?.data,\n          error: undefined,\n        };\n      }\n    },\n    onRequest: (service, args) => {\n      let servicePromise = getCachePromise(cacheKey);\n\n      // If has servicePromise, and is not trigger by self, then use it\n      if (servicePromise && servicePromise !== currentPromiseRef.current) {\n        return { servicePromise };\n      }\n\n      servicePromise = service(...args);\n      currentPromiseRef.current = servicePromise;\n      setCachePromise(cacheKey, servicePromise);\n      return { servicePromise };\n    },\n    onSuccess: (data, params) => {\n      if (cacheKey) {\n        // cancel subscribe, avoid trgger self\n        unSubscribeRef.current?.();\n        _setCache(cacheKey, {\n          data,\n          params,\n          time: new Date().getTime(),\n        });\n        // resubscribe\n        unSubscribeRef.current = subscribe(cacheKey, (d) => {\n          console.log('\u89e6\u53d1\u8ba2\u9605');\n          fetchInstance.setState({ data: d });\n        });\n      }\n    },\n    onMutate: (data) => {\n      if (cacheKey) {\n        // cancel subscribe, avoid trigger self\n        unSubscribeRef.current?.();\n        _setCache(cacheKey, {\n          data,\n          params: fetchInstance.state.params,\n          time: new Date().getTime(),\n        });\n        // resubscribe\n        unSubscribeRef.current = subscribe(cacheKey, (d) => {\n          fetchInstance.setState({ data: d });\n        });\n      }\n    },\n  };\n};\n\nexport default useCachePlugin;",Q="type Timer = ReturnType<typeof setTimeout>;\ntype CachedKey = string | number;\n\nexport interface CachedData<TData = any, TParams = any> {\n  data: TData;\n  params: TParams;\n  time: number;\n}\ninterface RecordData extends CachedData {\n  timer: Timer | undefined;\n}\n\nconst cache = new Map<CachedKey, RecordData>();\n\nconst setCache = (\n  key: CachedKey,\n  cacheTime: number,\n  cachedData: CachedData,\n) => {\n  const currentCache = cache.get(key);\n  if (currentCache?.timer) {\n    clearTimeout(currentCache.timer);\n  }\n\n  let timer: Timer | undefined = undefined;\n\n  if (cacheTime > -1) {\n    // if cache out, clear it\n    timer = setTimeout(() => {\n      cache.delete(key);\n    }, cacheTime);\n  }\n\n  cache.set(key, {\n    ...cachedData,\n    timer,\n  });\n};\n\nconst getCache = (key: CachedKey) => {\n  return cache.get(key);\n};\n\nconst clearCache = (key?: string | string[]) => {\n  if (key) {\n    const cacheKeys = Array.isArray(key) ? key : [key];\n    cacheKeys.forEach((cacheKey) => cache.delete(cacheKey));\n  } else {\n    cache.clear();\n  }\n};\n\nexport { getCache, setCache, clearCache };",ee="type CachedKey = string | number;\nconst cachePromise = new Map<CachedKey, Promise<any>>();\n\nconst getCachePromise = (cacheKey: CachedKey) => {\n  return cachePromise.get(cacheKey);\n};\n\nconst setCachePromise = (cacheKey: CachedKey, promise: Promise<any>) => {\n  // Should cache the same promise, cannot be promise.finally\n  // Because the promise.finally will change the reference of the promise\n  cachePromise.set(cacheKey, promise);\n\n  // no use promise.finally for compatibility\n  promise\n    .then((res) => {\n      cachePromise.delete(cacheKey);\n      return res;\n    })\n    .catch(() => {\n      cachePromise.delete(cacheKey);\n    });\n};\n\nexport { getCachePromise, setCachePromise };",ne="type Listener = (data: any) => void;\nconst listeners: Record<string, Listener[]> = {};\n\nconst trigger = (key: string, data: any) => {\n  if (listeners[key]) {\n    listeners[key].forEach((item) => item(data));\n  }\n};\n\nconst subscribe = (key: string, listener: Listener) => {\n  if (!listeners[key]) {\n    listeners[key] = [];\n  }\n  listeners[key].push(listener);\n\n  return function unsubscribe() {\n    const index = listeners[key].indexOf(listener);\n    listeners[key].splice(index, 1);\n  };\n};\n\nexport { trigger, subscribe };",te="import type { DebouncedFunc, DebounceSettings } from 'lodash-es';\nimport { debounce } from 'lodash-es';\nimport { useEffect, useMemo, useRef } from 'react';\nimport type { Plugin } from '../types';\n\nconst useDebouncdPlugin: Plugin<any, any[]> = (\n  fetchInstance,\n  { debounceWait, debounceLeading, debounceTrailing, debounceMaxWait },\n) => {\n  const debounceRef = useRef<DebouncedFunc<any>>();\n\n  const options = useMemo(() => {\n    const ret: DebounceSettings = {};\n    if (debounceLeading !== undefined) {\n      ret.leading = debounceLeading;\n    }\n    if (debounceTrailing !== undefined) {\n      ret.trailing = debounceTrailing;\n    }\n    if (debounceMaxWait !== undefined) {\n      ret.maxWait = debounceMaxWait;\n    }\n  }, [debounceLeading, debounceTrailing, debounceMaxWait]);\n\n  useEffect(() => {\n    if (debounceWait) {\n      const _originRunAsync = fetchInstance.runAsync.bind(fetchInstance);\n\n      debounceRef.current = debounce(\n        (callback) => {\n          callback();\n        },\n        debounceWait,\n        options,\n      );\n\n      fetchInstance.runAsync = (...args) => {\n        return new Promise((resolve, reject) => {\n          debounceRef.current?.(() => {\n            _originRunAsync(...args)\n              .then(resolve)\n              .catch(reject);\n          });\n        });\n      };\n\n      return () => {\n        debounceRef.current?.cancel();\n        fetchInstance.runAsync = _originRunAsync;\n      };\n    }\n  }, [debounceWait, options]);\n\n  if (!debounceWait) {\n    return {};\n  }\n\n  return {\n    onCancel: () => {\n      debounceRef.current?.cancel();\n    },\n  };\n};\n\nexport default useDebouncdPlugin;",re="import type { DebouncedFunc, ThrottleSettings } from 'lodash-es';\nimport { throttle } from 'lodash-es';\nimport { useEffect, useRef } from 'react';\nimport type { Plugin } from '../types';\n\nconst useThrottlePlugin: Plugin<any, any[]> = (\n  fetchInstance,\n  { throttleWait, throttleLeading, throttleTrailing },\n) => {\n  const throttledRef = useRef<DebouncedFunc<any>>();\n\n  const options: ThrottleSettings = {};\n  if (throttleLeading !== undefined) {\n    options.leading = throttleLeading;\n  }\n  if (throttleTrailing !== undefined) {\n    options.trailing = throttleTrailing;\n  }\n\n  useEffect(() => {\n    if (throttleWait) {\n      const _originRunAsync = fetchInstance.runAsync.bind(fetchInstance);\n\n      throttledRef.current = throttle(\n        (callback) => {\n          callback();\n        },\n        throttleWait,\n        options,\n      );\n\n      // throttle runAsync should be promise\n      // https://github.com/lodash/lodash/issues/4400#issuecomment-834800398\n      fetchInstance.runAsync = (...args) => {\n        return new Promise((resolve, reject) => {\n          throttledRef.current?.(() => {\n            _originRunAsync(...args)\n              .then(resolve)\n              .catch(reject);\n          });\n        });\n      };\n\n      return () => {\n        fetchInstance.runAsync = _originRunAsync;\n        throttledRef.current?.cancel();\n      };\n    }\n  }, [throttleWait, throttleLeading, throttleTrailing]);\n\n  if (!throttleWait) {\n    return {};\n  }\n\n  return {\n    onCancel: () => {\n      throttledRef.current?.cancel();\n    },\n  };\n};\n\nexport default useThrottlePlugin;",se="import Mock from 'mockjs';\nimport React from 'react';\nimport { useRequest, clearCache, useBoolean } from 'frogHooks';\nimport { message } from 'antd';\n\nasync function getArticle(): Promise<{ data: string; time: number }> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        data: Mock.mock('@paragraph'),\n        time: new Date().getTime(),\n      });\n    }, 3000);\n  });\n}\n\nconst Article = ({ cacheKey }) => {\n  const { data, loading } = useRequest(getArticle, {\n    cacheKey,\n  });\n  if (!data && loading) {\n    return <p>Loading</p>;\n  }\n  return (\n    <>\n      <p>Background loading: {loading ? 'true' : 'false'}</p>\n      <p>Latest request time: {data?.time}</p>\n      <p>{data?.data}</p>\n    </>\n  );\n};\n\nconst clear = (cacheKey?: string | string[]) => {\n  clearCache(cacheKey);\n  const tips = Array.isArray(cacheKey) ? cacheKey.join('\u3001') : cacheKey;\n  message.success(`Clear ${tips ?? 'All'} finished`);\n};\n\nexport default () => {\n  const [state, { toggle }] = useBoolean();\n  return (\n    <div>\n      <p>\n        <button type=\"button\" onClick={() => toggle()}>\n          show/hidden\n        </button>\n      </p>\n      <p>\n        <button style={{ marginRight: 8 }} onClick={() => clear('Article1')}>\n          Clear Article1\n        </button>\n        <button style={{ marginRight: 8 }} onClick={() => clear('Article2')}>\n          Clear Article2\n        </button>\n        <button\n          style={{ marginRight: 8 }}\n          onClick={() => clear(['Article2', 'Article3'])}\n        >\n          Clear Article2 and Article3\n        </button>\n        <button onClick={() => clear()}>Clear All</button>\n      </p>\n      <h2>Article 1</h2>\n      {state && <Article cacheKey=\"Article1\" />}\n      <h2>Article 2</h2>\n      {state && <Article cacheKey=\"Article2\" />}\n      <h2>Article 3</h2>\n      {state && <Article cacheKey=\"Article3\" />}\n    </div>\n  );\n};",oe="import { useBoolean, useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\nimport React from 'react';\n\nasync function getArticle(): Promise<{ data: string; time: number }> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        data: Mock.mock('@paragraph'),\n        time: new Date().getTime(),\n      });\n    }, 1000);\n  });\n}\n\nconst cacheKey = 'setCache-demo';\n\nconst Article = () => {\n  const { data, loading } = useRequest(getArticle, {\n    cacheKey,\n    setCache: (data) => localStorage.setItem(cacheKey, JSON.stringify(data)),\n    getCache: () => JSON.parse(localStorage.getItem(cacheKey) || '{}'),\n  });\n  if (!data && loading) {\n    return <p>Loading</p>;\n  }\n  return (\n    <>\n      <p>Background loading: {loading ? 'true' : 'false'}</p>\n      <p>Latest request time: {data?.time}</p>\n      <p>{data?.data}</p>\n    </>\n  );\n};\n\nexport default () => {\n  const [state, { toggle }] = useBoolean();\n  return (\n    <div>\n      <button type=\"button\" onClick={() => toggle()}>\n        show/hidden\n      </button>\n      {state && <Article />}\n    </div>\n  );\n};",ae="import { useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\nimport React from 'react';\n\nasync function getEmail(search?: string): Promise<string[]> {\n  console.log('debounce getEmail', search);\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock({ 'data|5': ['@email'] }).data);\n    }, 300);\n  });\n}\n\nexport default () => {\n  const { data, loading, run } = useRequest(getEmail, {\n    debounceWait: 1000,\n    manual: true,\n  });\n\n  return (\n    <div>\n      <input\n        placeholder=\"Search Emails\"\n        onChange={(e) => run(e.target.value)}\n      />\n      {loading ? (\n        <p>loading</p>\n      ) : (\n        <ul style={{ marginTop: 8 }}>\n          {data?.map((i) => (\n            <li key={i}>{i}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};",ie="import React from 'react';\nimport { useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\n\nfunction getUsername(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock('@name'));\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const { data, error, loading } = useRequest(getUsername);\n\n  if (error) {\n    return <p>failed to load</p>;\n  }\n\n  if (loading) {\n    return <p>loading...</p>;\n  }\n\n  return <p>Username: {data}</p>;\n};",ue="import React, { useState } from 'react';\nimport { useRequest } from 'frogHooks';\nimport { message } from 'antd';\n\nfunction changeUsername(\n  username: string,\n): Promise<{ success: boolean; username: string }> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ success: true, username });\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const [state, setState] = useState('');\n\n  const { data, error, loading, run } = useRequest(changeUsername, {\n    manual: true,\n    onSuccess: (result, params) => {\n      if (result.success) {\n        setState('');\n        message.success(`The username was changed to \"${params[0]}\" !`);\n      }\n    },\n  });\n\n  return (\n    <div>\n      <input\n        onChange={(e) => setState(e.target.value)}\n        value={state}\n        placeholder=\"Please enter username\"\n        style={{ width: 240, marginRight: 16 }}\n      />\n      <button disabled={loading} type=\"button\" onClick={() => run(state)}>\n        {loading ? 'Loading' : 'Edit'}\n      </button>\n      <p>Username: {data?.username}</p>\n    </div>\n  );\n};",ce="import React from 'react';\nimport { useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\n\nfunction getUsername(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock('@name'));\n    }, 200);\n  });\n}\n\nexport default () => {\n  const action = useRequest(getUsername);\n\n  const withLoadingDelayAction = useRequest(getUsername, {\n    loadingDelay: 300,\n  });\n\n  const trigger = () => {\n    action.run();\n    withLoadingDelayAction.run();\n  };\n\n  return (\n    <div>\n      <button type=\"button\" onClick={trigger}>\n        run\n      </button>\n\n      <div style={{ margin: '24px 0', width: 300 }}>\n        Username: {action.loading ? 'Loading...' : action.data}\n      </div>\n      <div>\n        Username:{' '}\n        {withLoadingDelayAction.loading\n          ? 'Loading...'\n          : withLoadingDelayAction.data}\n      </div>\n    </div>\n  );\n};",le="import React from 'react';\nimport { useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\n\nfunction getUsername(): Promise<string> {\n  console.log('polling getUsername');\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock('@name'));\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const { data, loading, run, cancel } = useRequest(getUsername, {\n    pollingInterval: 3000,\n    pollingWhenHidden: false,\n  });\n\n  return (\n    <>\n      <p>Username: {loading ? 'Loading' : data}</p>\n      <button type=\"button\" onClick={run}>\n        start polling\n      </button>\n      <button type=\"button\" onClick={cancel} style={{ marginLeft: 16 }}>\n        stop polling\n      </button>\n    </>\n  );\n};",de="import React from 'react';\nimport { useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\nimport { message } from 'antd';\n\nfunction getUsername(): Promise<string> {\n  console.log('polling getUsername error');\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(Mock.mock('@name')));\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const { data, error, loading, run, cancel } = useRequest(getUsername, {\n    pollingInterval: 3000,\n    pollingWhenHidden: false,\n    pollingErrorRetryCount: 3,\n    manual: true,\n    onError: (error) => {\n      message.error(error.message);\n    },\n  });\n\n  return (\n    <>\n      <p>Username: {loading ? 'Loading' : data}</p>\n      <button type=\"button\" onClick={run}>\n        start\n      </button>\n      <button type=\"button\" onClick={cancel} style={{ marginLeft: 16 }}>\n        stop\n      </button>\n    </>\n  );\n};",me="import { useRequest, useToggle } from 'frogHooks';\nimport Mock from 'mockjs';\nimport React from 'react';\n\nfunction getUsername(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock('@name'));\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const [ready, { toggle }] = useToggle(false);\n\n  const { data, loading } = useRequest(getUsername, {\n    ready,\n  });\n\n  return (\n    <>\n      <p>\n        Ready: {JSON.stringify(ready)}\n        <button onClick={toggle} style={{ marginLeft: 16 }}>\n          Toggle Ready\n        </button>\n      </p>\n      <p>Username: {loading ? 'Loading' : data}</p>\n    </>\n  );\n};",pe="import { useRequest, useToggle } from 'frogHooks';\nimport Mock from 'mockjs';\nimport React from 'react';\n\nfunction getUsername(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock('@name'));\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const [ready, { toggle }] = useToggle(false);\n\n  const { data, loading, run } = useRequest(getUsername, {\n    ready,\n    manual: true,\n  });\n\n  return (\n    <>\n      <p>\n        Ready: {JSON.stringify(ready)}\n        <button onClick={toggle} style={{ marginLeft: 16 }}>\n          Toggle Ready\n        </button>\n      </p>\n      <p>\n        Username: {loading ? 'Loading' : data}\n        <button type=\"button\" onClick={run} style={{ marginLeft: 16 }}>\n          run\n        </button>\n      </p>\n    </>\n  );\n};",fe="import React, { useState } from 'react';\nimport { useRequest } from 'frogHooks';\n\nconst userSchool = (id: string) => {\n  switch (id) {\n    case '1':\n      return 'Tsinghua University';\n    case '2':\n      return 'Beijing University';\n    case '3':\n      return 'Zhejiang University';\n    default:\n      return '';\n  }\n};\n\nasync function getUserSchool(userId: string): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(userSchool(userId));\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const [userId, setUserId] = useState('1');\n  const { data, loading } = useRequest(() => getUserSchool(userId), {\n    refreshDeps: [userId],\n  });\n\n  return (\n    <div>\n      <select\n        onChange={(e) => setUserId(e.target.value)}\n        value={userId}\n        style={{ marginBottom: 16, width: 120 }}\n      >\n        <option value=\"1\">user 1</option>\n        <option value=\"2\">user 2</option>\n        <option value=\"3\">user 3</option>\n      </select>\n      <p>School: {loading ? 'Loading' : data}</p>\n    </div>\n  );\n};",ge="import Mock from 'mockjs';\nimport React from 'react';\nimport { useRequest } from 'frogHooks';\n\nfunction getUsername() {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock('@name'));\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const { data, loading } = useRequest(getUsername, {\n    refreshOnWindowFocus: true,\n  });\n\n  return <div>Username: {loading ? 'Loading' : data}</div>;\n};",he="import { useRequest } from 'frogHooks';\nimport React, { useState } from 'react';\nimport { message } from 'antd';\n\nfunction editUsername(username: string) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error('Failed to modify username'));\n    }, 1000);\n  });\n}\n\nexport default () => {\n  const [state, setState] = useState('');\n  const { loading, run } = useRequest(editUsername, {\n    retryCount: 3,\n    manual: true,\n    onError: (error) => {\n      message.error(error.message);\n    },\n  });\n\n  return (\n    <div>\n      <input\n        onChange={(e) => setState(e.target.value)}\n        value={state}\n        placeholder=\"Please enter username\"\n        style={{ width: 240, marginRight: 16 }}\n      />\n      <button disabled={loading} type=\"button\" onClick={() => run(state)}>\n        {loading ? 'Loading' : 'Edit'}\n      </button>\n    </div>\n  );\n};",be="import { useRequest } from 'frogHooks';\nimport Mock from 'mockjs';\nimport React from 'react';\n\nasync function getEmail(search?: string): Promise<string[]> {\n  console.log('throttle getEmail', search);\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(Mock.mock({ 'data|5': ['@email'] }).data);\n    }, 300);\n  });\n}\n\nexport default () => {\n  const { data, loading, run } = useRequest(getEmail, {\n    throttleWait: 1000,\n    manual: true,\n  });\n\n  return (\n    <div>\n      <input\n        placeholder=\"Search Emails\"\n        onChange={(e) => run(e.target.value)}\n      />\n      {loading ? (\n        <p>loading</p>\n      ) : (\n        <ul style={{ marginTop: 8 }}>\n          {data?.map((i) => (\n            <li key={i}>{i}</li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};",ve="import React, { useState } from 'react';\nimport { useThrottle } from 'frogHooks';\n\nexport default () => {\n  const [value, setValue] = useState<string>();\n  const throttledValue = useThrottle(value, { wait: 500 });\n\n  return (\n    <div>\n      <input\n        value={value}\n        onChange={(e) => setValue(e.target.value)}\n        placeholder=\"Typed value\"\n        style={{ width: 280 }}\n      />\n      <p style={{ marginTop: 16 }}>throttledValue: {throttledValue}</p>\n    </div>\n  );\n};",ye="import React, { useState } from 'react';\nimport { useThrottleFn } from 'frogHooks';\n\nexport default () => {\n  const [value, setValue] = useState(0);\n  const { run } = useThrottleFn(\n    () => {\n      setValue(value + 1);\n    },\n    { wait: 500 },\n  );\n\n  return (\n    <div>\n      <p style={{ marginTop: 16 }}> Clicked count: {value} </p>\n      <button type=\"button\" onClick={run}>\n        Click fast!\n      </button>\n    </div>\n  );\n};",we="import React from 'react';\nimport { useToggle } from 'frogHooks';\n\nexport default () => {\n  const [state, { toggle, setLeft, setRight }] = useToggle();\n\n  return (\n    <div>\n      <p>Effects\uff1a{`${state}`}</p>\n      <p>\n        <button type=\"button\" onClick={toggle}>\n          Toggle\n        </button>\n        <button type=\"button\" onClick={setLeft} style={{ margin: '0 8px' }}>\n          Toggle False\n        </button>\n        <button type=\"button\" onClick={setRight}>\n          Toggle True\n        </button>\n      </p>\n    </div>\n  );\n};",ke="import React from 'react';\nimport { useToggle } from 'frogHooks';\n\nexport default () => {\n  const [state, { toggle, set, setLeft, setRight }] = useToggle(\n    'Hello',\n    'World',\n  );\n\n  return (\n    <div>\n      <p>Effects\uff1a{state}</p>\n      <p>\n        <button type=\"button\" onClick={toggle}>\n          Toggle\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => set('Hello')}\n          style={{ margin: '0 8px' }}\n        >\n          Set Hello\n        </button>\n        <button type=\"button\" onClick={() => set('World')}>\n          Set World\n        </button>\n        <button type=\"button\" onClick={setLeft} style={{ margin: '0 8px' }}>\n          Set Left\n        </button>\n        <button type=\"button\" onClick={setRight}>\n          Set Right\n        </button>\n      </p>\n    </div>\n  );\n};",Pe="import React from 'react';\nimport { useBoolean, useUnmount } from 'frogHooks';\nimport { message } from 'antd';\n\nfunction MyComponent() {\n  useUnmount(() => {\n    message.info('unmount');\n  });\n\n  return <p>hello world!</p>;\n}\n\nexport default () => {\n  const [state, { toggle }] = useBoolean(true);\n\n  return (\n    <>\n      <button type=\"button\" onClick={toggle}>\n        {state ? 'unmount' : 'mount'}\n      </button>\n      {state && <MyComponent />}\n    </>\n  );\n};",Re="import React from 'react';\nimport { useUpdate } from 'frogHooks';\n\nexport default () => {\n  const update = useUpdate();\n\n  return (\n    <>\n      <div>Time: {Date.now()}</div>\n      <button type=\"button\" onClick={update} style={{ marginTop: 8 }}>\n        update\n      </button>\n    </>\n  );\n};",xe="import React, { useState, useEffect } from 'react';\nimport { useUpdateEffect } from 'frogHooks';\n\nexport default () => {\n  const [count, setCount] = useState(0);\n  const [effectCount, setEffectCount] = useState(0);\n  const [updateEffectCount, setUpdateEffectCount] = useState(0);\n\n  useEffect(() => {\n    setEffectCount((c) => c + 1);\n  }, [count]);\n\n  useUpdateEffect(() => {\n    setUpdateEffectCount((c) => c + 1);\n\n    return () => {\n      // do something\n    };\n  }, [count]);\n\n  return (\n    <div>\n      <p>effectCount: {effectCount}</p>\n      <p>updateEffectCount: {updateEffectCount}</p>\n      <p>\n        <button type=\"button\" onClick={() => setCount((c) => c + 1)}>\n          reRender\n        </button>\n      </p>\n    </div>\n  );\n};",je={"useboolean-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"yoie"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:l}},dependencies:{react:{version:"18.3.1"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>\u5207\u6362 boolean\uff0c\u53ef\u4ee5\u63a5\u6536\u9ed8\u8ba4\u503c\u3002</p></div>',identifier:"useboolean-demo1"}},"usedebounce-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"eWij"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:d}},dependencies:{react:{version:"18.3.1"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>DebouncedValue \u53ea\u4f1a\u5728\u8f93\u5165\u7ed3\u675f 500ms \u540e\u53d8\u5316\u3002</p></div>',identifier:"usedebounce-demo1"}},"usedebouncefn-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"tHpm"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:m}},dependencies:{react:{version:"18.3.1"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>\u9891\u7e41\u8c03\u7528 run\uff0c\u4f46\u53ea\u4f1a\u5728\u6240\u6709\u70b9\u51fb\u5b8c\u6210 500ms \u540e\u6267\u884c\u4e00\u6b21\u76f8\u5173\u51fd\u6570</p></div>',identifier:"usedebouncefn-demo1"}},"uselatest-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"OCTU"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:p}},dependencies:{react:{version:"18.3.1"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>uesLatest \u8fd4\u56de\u7684\u6c38\u8fdc\u662f\u6700\u65b0\u503c</p></div>',identifier:"uselatest-demo1"}},"usememoizedfn-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"yQWC"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:f}},dependencies:{react:{version:">=16.9.0"},antd:{version:"5.24.6"},"react-dom":{version:">=16.9.0"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>useMemoizedFn \u4e0e useCallback \u53ef\u4ee5\u5b9e\u73b0\u540c\u6837\u7684\u6548\u679c\u3002</p></div>',identifier:"usememoizedfn-demo1"}},"usememoizedfn-demo2":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"lkYe"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:g}},dependencies:{react:{version:">=16.9.0"},antd:{version:"5.24.6"},"react-dom":{version:">=16.9.0"}},title:"useMemoizedFn \u51fd\u6570\u5730\u5740\u4e0d\u4f1a\u53d8\u5316\uff0c\u53ef\u4ee5\u7528\u4e8e\u6027\u80fd\u4f18\u5316",description:'<div class="markdown"><p>\u793a\u4f8b\u4e2d <code>memoizedFn</code> \u662f\u4e0d\u4f1a\u53d8\u5316\u7684\uff0c<code>callbackFn</code> \u5728 count \u53d8\u5316\u65f6\u53d8\u5316\u3002</p></div>',identifier:"usememoizedfn-demo2"}},"usemount-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"G/gl"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:h}},dependencies:{react:{version:">=16.9.0"},antd:{version:"5.24.6"},"react-dom":{version:">=16.9.0"}},title:"\u57fa\u7840\u7528\u6cd5",hideActions:["CSB"],description:'<div class="markdown"><p>\u5728\u7ec4\u4ef6\u9996\u6b21\u6e32\u67d3\u65f6\uff0c\u6267\u884c\u65b9\u6cd5\u3002</p></div>',identifier:"usemount-demo1"}},"basic-default":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"pCsH"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:b}},dependencies:{react:{version:"18.3.1"},mockjs:{version:"1.1.0"}},title:"\u8bfb\u53d6\u7528\u6237\u540d\u79f0",identifier:"basic-default"}},"basic-manual-run":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"0FZJ"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:v}},dependencies:{antd:{version:"5.24.6"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},title:"\u4fee\u6539\u7528\u6237\u540d",description:'<div class="markdown"><p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 <code>run(username)</code> \u6765\u4fee\u6539\u7528\u6237\u540d\uff0c\u901a\u8fc7 <code>onSuccess</code> \u548c <code>onError</code> \u6765\u5904\u7406\u6210\u529f\u548c\u5931\u8d25\u3002</p></div>',identifier:"basic-manual-run"}},"basic-manual-runasync":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"QX9I"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:y}},dependencies:{antd:{version:"5.24.6"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},title:"\u4fee\u6539\u7528\u6237\u540d",description:'<div class="markdown"><p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u901a\u8fc7 <code>runAsync(username)</code> \u6765\u4fee\u6539\u7528\u6237\u540d\uff0c\u6b64\u65f6\u5fc5\u987b\u901a\u8fc7 catch \u6765\u81ea\u884c\u5904\u7406\u5f02\u5e38\u3002</p></div>',identifier:"basic-manual-runasync"}},"basic-lifecycle":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"nM+G"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:w}},dependencies:{antd:{version:"5.24.6"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"basic-lifecycle"}},"basic-refresh":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"xuOu"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:k}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},title:"\u5237\u65b0\u7528\u6237\u540d\u79f0",identifier:"basic-refresh"}},"basic-mutate":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"LJut"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:P}},dependencies:{antd:{version:"5.24.6"},react:{version:">=16.9.0"},mockjs:{version:"1.1.0"},"react-dom":{version:">=16.9.0"}},title:"\u4fee\u6539\u7528\u6237\u540d",identifier:"basic-mutate"}},"basic-cancel":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"drTZ"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:R}},dependencies:{antd:{version:"5.24.6"},react:{version:">=16.9.0"},"react-dom":{version:">=16.9.0"}},identifier:"basic-cancel"}},"basic-params":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"wXwD"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:x}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},identifier:"basic-params"}},"cache-cachekey":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"l7Op"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:j}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},identifier:"cache-cachekey"}},"cache-staletime":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"c4XM"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:C}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},identifier:"cache-staletime"}},"cache-share":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"znEi"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:O}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},identifier:"cache-share"}},"cache-params":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"/2Pz"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:T},"index.ts":{import:"../../../",content:S},"src/useRequest.ts":{import:"./src/useRequest",content:D},"src/useRequestImplement.ts":{import:"./useRequestImplement",content:U},"useLatest/index.ts":{import:"../../useLatest",content:E},"useMemoizedFn/index.ts":{import:"../../useMemoizedFn",content:M},"utils/index.ts":{import:"../utils",content:F},"utils/isDev.ts":{import:"../utils/isDev",content:A},"useMount/index.ts":{import:"../../useMount",content:q},"useUnmount/index.ts":{import:"../../useUnmount",content:L},"useUpdate/index.ts":{import:"../../useUpdate",content:I},"src/Fetch.ts":{import:"./Fetch",content:H},"src/plugins/useLoadingDelayPlugin.ts":{import:"./plugins/useLoadingDelayPlugin",content:K},"src/plugins/usePollingPlugin.ts":{import:"./plugins/usePollingPlugin",content:B},"useUpdateEffect/index.ts":{import:"../../../useUpdateEffect",content:_},"createUpdateEffect/index.ts":{import:"../createUpdateEffect",content:W},"src/utils/isDocumentVisible.ts":{import:"../utils/isDocumentVisible",content:z},"utils/isBrowser.ts":{import:"../../../utils/isBrowser",content:V},"src/utils/subscribeReVisible.ts":{import:"../utils/subscribeReVisible",content:N},"src/plugins/useAutoRunPlugin.ts":{import:"./plugins/useAutoRunPlugin",content:$},"src/plugins/useRefreshOnWindowFocusPlugin.ts":{import:"./plugins/useRefreshOnWindowFocusPlugin",content:G},"src/utils/limit.ts":{import:"../utils/limit",content:J},"src/utils/subscribeFocus.ts":{import:"../utils/subscribeFocus",content:Z},"src/utils/isOnline.ts":{import:"./isOnline",content:Y},"src/plugins/useCachePlugin.ts":{import:"./plugins/useCachePlugin",content:X},"src/utils/cache.ts":{import:"../utils/cache",content:Q},"src/utils/cachePromise.ts":{import:"../utils/cachePromise",content:ee},"src/utils/cacheSubscribe.ts":{import:"../utils/cacheSubscribe",content:ne},"src/plugins/useDebouncePlugin.ts":{import:"./plugins/useDebouncePlugin",content:te},"src/plugins/useThrottlePlugin.ts":{import:"./plugins/useThrottlePlugin",content:re}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"},"lodash-es":{version:"4.17.21"}},identifier:"cache-params"}},"cache-clearcache":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"UMqi"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:se}},dependencies:{mockjs:{version:"1.1.0"},react:{version:">=16.9.0"},antd:{version:"5.24.6"},"react-dom":{version:">=16.9.0"}},identifier:"cache-clearcache"}},"cache-setcache":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"hwAf"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:oe}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},identifier:"cache-setcache"}},"debounce-debounce":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"3Kkl"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ae}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},identifier:"debounce-debounce"}},"index-default":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"CgOj"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ie}},dependencies:{react:{version:"18.3.1"},mockjs:{version:"1.1.0"}},title:"\u8bfb\u53d6\u7528\u6237\u540d\u79f0",identifier:"index-default"}},"index-manual":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"TtH1"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ue}},dependencies:{react:{version:">=16.9.0"},antd:{version:"5.24.6"},"react-dom":{version:">=16.9.0"}},title:"\u4fee\u6539\u7528\u6237\u540d",description:'<div class="markdown"><p>\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u5c1d\u8bd5\u4fee\u6539\u7528\u6237\u540d\u3002</p></div>',identifier:"index-manual"}},"loadingdelay-loadingdelay":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"f90P"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ce}},dependencies:{react:{version:"18.3.1"},mockjs:{version:"1.1.0"}},identifier:"loadingdelay-loadingdelay"}},"polling-polling":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"i0JP"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:le}},dependencies:{react:{version:"18.3.1"},mockjs:{version:"1.1.0"}},identifier:"polling-polling"}},"polling-pollingerror":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"H7+1"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:de}},dependencies:{react:{version:">=16.9.0"},mockjs:{version:"1.1.0"},antd:{version:"5.24.6"},"react-dom":{version:">=16.9.0"}},identifier:"polling-pollingerror"}},"ready-ready":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"toP+"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:me}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},identifier:"ready-ready"}},"ready-manualready":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"j7q0"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:pe}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},identifier:"ready-manualready"}},"refreshdeps-refreshdeps":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"YA9D"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:fe}},dependencies:{react:{version:"18.3.1"}},identifier:"refreshdeps-refreshdeps"}},"refreshonwindowfocus-refreshonwindowfocus":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"7ZKv"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ge}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},identifier:"refreshonwindowfocus-refreshonwindowfocus"}},"retry-retry":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"hlu1"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:he}},dependencies:{react:{version:">=16.9.0"},antd:{version:"5.24.6"},"react-dom":{version:">=16.9.0"}},identifier:"retry-retry"}},"throttle-throttle":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"Htym"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:be}},dependencies:{mockjs:{version:"1.1.0"},react:{version:"18.3.1"}},identifier:"throttle-throttle"}},"usethrottle-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"aFWa"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ve}},dependencies:{react:{version:"18.3.1"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>ThrottledValue \u6bcf\u9694 500ms \u53d8\u5316\u4e00\u6b21\u3002</p></div>',identifier:"usethrottle-demo1"}},"usethrottlefn-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"rXjo"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ye}},dependencies:{react:{version:"18.3.1"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>\u9891\u7e41\u8c03\u7528 run\uff0c\u4f46\u53ea\u4f1a\u6bcf\u9694 500ms \u6267\u884c\u4e00\u6b21\u76f8\u5173\u51fd\u6570\u3002</p></div>',identifier:"usethrottlefn-demo1"}},"usetoggle-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"82LI"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:we}},dependencies:{react:{version:"18.3.1"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>\u9ed8\u8ba4\u4e3a boolean \u5207\u6362\uff0c\u57fa\u7840\u7528\u6cd5\u4e0e useBoolean \u4e00\u81f4\u3002</p></div>',identifier:"usetoggle-demo1"}},"usetoggle-demo2":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"Dr+N"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:ke}},dependencies:{react:{version:"18.3.1"}},title:"\u5728\u4efb\u610f\u4e24\u4e2a\u503c\u4e4b\u95f4\u5207\u6362",description:'<div class="markdown"><p>\u63a5\u53d7\u4e24\u4e2a\u53ef\u9009\u53c2\u6570\uff0c\u5728\u5b83\u4eec\u4e4b\u95f4\u8fdb\u884c\u5207\u6362\u3002</p></div>',identifier:"usetoggle-demo2"}},"useunmount-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"y7Gi"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Pe}},dependencies:{react:{version:">=16.9.0"},antd:{version:"5.24.6"},"react-dom":{version:">=16.9.0"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>\u5728\u7ec4\u4ef6\u5378\u8f7d\u65f6\uff0c\u6267\u884c\u51fd\u6570</p></div>',identifier:"useunmount-demo1"}},"useupdate-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"INwW"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:Re}},dependencies:{react:{version:"18.3.1"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>\u5f3a\u5236\u7ec4\u4ef6\u91cd\u65b0\u6e32\u67d3\u3002</p></div>',identifier:"useupdate-demo1"}},"useupdateeffect-demo1":{component:Object(c["dynamic"])({loader:function(){var e=Object(u["a"])(Object(i["a"])().mark((function e(){return Object(i["a"])().wrap((function(e){while(1)switch(e.prev=e.next){case 0:return e.next=2,Promise.all([t.e(2),t.e(32),t.e(4)]).then(t.bind(null,"vcr8"));case 2:return e.abrupt("return",e.sent.default);case 3:case"end":return e.stop()}}),e)})));function n(){return e.apply(this,arguments)}return n}(),loading:()=>null}),previewerProps:{sources:{_:{tsx:xe}},dependencies:{react:{version:"18.3.1"}},title:"\u57fa\u7840\u7528\u6cd5",description:'<div class="markdown"><p>\u4f7f\u7528\u4e0a\u4e0e useEffect \u5b8c\u5168\u76f8\u540c\uff0c\u53ea\u662f\u5b83\u5ffd\u7565\u4e86\u9996\u6b21\u6267\u884c\uff0c\u53ea\u5728\u4f9d\u8d56\u9879\u66f4\u65b0\u65f6\u6267\u884c\u3002</p></div>',identifier:"useupdateeffect-demo1"}}},Ce=t("Zs1V"),Oe=t("Bhwo"),Te=t.n(Oe);n["default"]=e=>o.a.createElement(Te.a,Object(r["a"])({},e,{config:a,demos:je,apis:Ce}))},RGYn:function(e){e.exports=JSON.parse('{"menus":{"en-US":{"*":[{"path":"/","title":"\u9996\u9875","meta":{}}],"/guide":[{"title":"\u4ecb\u7ecd","path":"/guide"}],"/hooks":[{"title":"\u751f\u547d\u5468\u671f","children":[{"path":"/hooks/use-unmount","title":"useUnmount"}]},{"title":"\u8bf7\u6c42","children":[{"path":"/hooks/use-request/index","title":"\u5feb\u901f\u4e0a\u624b"},{"path":"/hooks/use-request/basic","title":"\u57fa\u7840\u7528\u6cd5"},{"path":"/hooks/use-request/loading-delay","title":"Loading Delay"},{"path":"/hooks/use-request/polling","title":"\u8f6e\u8be2"},{"path":"/hooks/use-request/ready","title":"Ready"},{"path":"/hooks/use-request/refresh-deps","title":"\u4f9d\u8d56\u5237\u65b0"},{"path":"/hooks/use-request/refresh-on-window-focus","title":"\u5c4f\u5e55\u805a\u7126\u91cd\u65b0\u8bf7\u6c42"},{"path":"/hooks/use-request/debounce","title":"\u9632\u6296"},{"path":"/hooks/use-request/throttle","title":"\u8282\u6d41"},{"path":"/hooks/use-request/cache","title":"\u7f13\u5b58 & SWR"},{"path":"/hooks/use-request/retry","title":"\u9519\u8bef\u91cd\u8bd5"}]},{"title":"\u72b6\u6001","children":[{"path":"/hooks/use-toggle","title":"useToggle"},{"path":"/hooks/use-boolean","title":"useBoolean"},{"path":"/hooks/use-debounce","title":"useDebounce"},{"path":"/hooks/use-throttle","title":"useThrottle"}]},{"title":"Effect","children":[{"path":"/hooks/use-debounce-fn","title":"useDebounceFn"},{"path":"/hooks/use-throttle-fn","title":"useThrottleFn"},{"path":"/hooks/use-update-effect","title":"useUpdateEffect"}]},{"title":"\u8fdb\u9636","children":[{"path":"/hooks/use-latest","title":"useLatest"},{"path":"/hooks/use-memoized-fn","title":"useMemoizedFn"}]}],"/":[{"title":"\u9996\u9875","path":"index"}]}},"locales":[{"name":"en-US","label":"English"}],"navs":{"en-US":[{"title":"\u6307\u5357","path":"/guide"},{"title":"Hooks","path":"/hooks"}]},"title":"frog hooks","mode":"site","repository":{"url":"","branch":"master"},"theme":{},"exportStatic":{}}')},Zs1V:function(e){e.exports=JSON.parse("{}")}}]);